#!/usr/bin/env node

const fs   = require('fs-extra')
const args = require('commander')
const { 
  startPeregrine, 
  getPackageList, 
  installPackages,
  setPort,
  addServer,
  getPathForServer,
  wait
} = require('../lib/tasks')
const { 
  peregrineBanner 
} = require('../lib/banner')
const { 
  downloadFile, 
  downloadFiles 
} = require('../lib/fetch')

args.version('1.0.0')
  .option('-d, --download', 'only download')
  .option('-e, --existing', 'install on running server')
  .option('-s, --sling [version]',  'force sling version')
  .option('-i, --install',  'only install')
  .option('-a, --author',  'install as author')
  .option('-p, --publish',  'install as publish')
  .option('-P, --port [port]',  'run on given port')
  .option('-n, --name [name]',  'register server with given name')
  .parse(process.argv)

let port = 8080
if(args.publish) {
    port = 8180
}

if(args.port) {
    port = args.port
}

let sling = 9;
if(args.sling) {
  if(args.sling === '9' || args.sling === '11') {
    sling = parseInt(args.sling);
  } else {
    console.log('only sling-9 and sling-11 are supported at this time - for other versions please log an enhancements request')
    process.exit(-1);
  }
}

/* Flow Control ==========
========================== */
async function serverInstall() {
  if (args.name) {
    let serverName = args.name
    if (!getPathForServer(serverName)) {
        addServer(serverName, process.cwd())
        console.log('Registering server '+serverName+' to path: '+process.cwd())
    } else {
        process.chdir(getPathForServer(args.name))
        console.log('Found server '+serverName+'. Changing path to: '+process.cwd())
    }
  }
  fs.mkdirsSync('out')
  try {
    // step 1
    await peregrineBanner()

    if(!args.install) {

        // step 2
        var packagesList = await getPackageList(sling)

        //step 3
        await downloadFile(`https://vagrant.headwire.com/sling/9/org.apache.sling.launchpad-${sling}.jar`, `sling-${sling}.jar`)

        // step 4
        await downloadFiles(packagesList, sling)
    }

    setPort(port)
    if(!args.download) {

        if(!args.existing) {
            let name = 'default-'+port
            // step 5

            fs.mkdirSync('sling')

            let slingproperties = ''
            if(args.publish) {
                name = 'publish-'+port
                slingproperties = `sling.run.modes=publish,notshared\norg.osgi.service.http.port=${port}`
            } else if(args.author) {
                name = 'author-'+port
                slingproperties = `sling.run.modes=authir,notshared\norg.osgi.service.http.port=${port}`
            } else {
                slingproperties = `org.osgi.service.http.port=${port}`
            }

            fs.writeFileSync('sling/sling.properties', slingproperties)

            await startPeregrine()
            await wait(1000)

        }

        // step 2
        var packagesList = await getPackageList()

        // step 6
        await installPackages(packagesList)
    }

  } catch (err) {
    console.error('serverInstall err')
    console.error(err)
  }
}

serverInstall()
